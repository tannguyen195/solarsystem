{"version":3,"sources":["hooks/scrollDirection.js","store/createCameraSlice.js","store/useStore.js","components/CameraControl.js","components/Lights.js","components/Fireflies/FireflyMaterial.js","components/Fireflies/Fireflies.js","components/Orbit.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["useScrollDirection","useState","direction","setDirection","useEffect","setFromEvent","e","wheelDeltaY","window","addEventListener","removeEventListener","createCameraSlice","set","get","activeMesh","setActiveMesh","mesh","shouldUpdate","setShouldUpdate","activeMeshName","cameraPos","cameraRos","targetPosition","THREE","useStore","create","CameraControl","useRef","useThree","scene","console","log","state","setPosition","setRotation","Lights","intensity","castShadow","shadow-bias","shadow-mapSize-width","shadow-mapSize-height","FireflyMaterial","uniforms","uTime","value","uPixelRatio","Math","min","devicePixelRatio","uSize","vertexShader","fragmentShader","this","v","Fireflies","count","scale","position","shader","useMemo","positionArray","Float32Array","scaleArray","colorArray","i","random","toArray","useFrame","delta","current","time","attachObject","array","itemSize","ref","transparent","depthWrite","extend","OrbitControls","Orbit","controls","camera","gl","orbitControls","position0","attach","args","domElement","sunRadius","planets","name","texture","orbitRate","rotationRate","distance","size","axialTilt","PI","orbitWidth","orbits","innerDiameter","facets","color","SolarSystem","map","planet","Planet","OrbitSystem","orbit","Ring","Sun","useTexture","process","planetTexture","Date","now","rotation","y","x","sin","z","cos","earthPosition","getObjectByName","side","DoubleSide","SaturnRing","ringTexture","saturnPosition","Home","colorManagement","style","background","near","far","fallback","Html","center","Loader","Array","fill","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAgBeA,EAdmB,WAAO,IAAD,EACJC,mBAAS,MADL,mBAC/BC,EAD+B,KACpBC,EADoB,KAYtC,OATAC,qBAAU,WACR,IAAMC,EAAe,SAACC,GAAD,OAAOH,EAAaG,EAAEC,YAAc,IAGzD,OAFAC,OAAOC,iBAAiB,QAASJ,GAE1B,WACLG,OAAOE,oBAAoB,QAASL,MAErC,IAEIH,G,wBCGMS,EAfW,SAACC,EAAKC,GAAN,MAAe,CACvCC,WAAY,GACZC,cAAe,WACbH,GAAI,SAACI,GAAD,MAAW,CAAEF,WAAYE,OAE/BC,cAAc,EACdC,gBAAiB,WACfN,GAAI,iBAAO,CAAEK,cAAc,OAE7BE,eAAgB,OAChBC,UAAW,CAAC,EAAG,GAAG,GAClBC,UAAW,CAAC,EAAG,EAAG,GAClBC,eAAgB,IAAIC,WAAe,IAAM,IAAM,KCNlCC,EAJEC,KAAO,SAACb,EAAKC,GAAN,sBACnBF,EAAkBC,EAAKC,OCkCba,MA/Bf,WACE,IAAMxB,EAAYF,IACA2B,mBAEAC,cAAVC,MACRC,QAAQC,IAAI7B,GAEZ,IAAMkB,EAAYI,GAAS,SAACQ,GAAD,OAAWA,EAAMZ,aACtCC,EAAYG,GAAS,SAACQ,GAAD,OAAWA,EAAMX,aARrB,EAUSpB,mBAAS,CAAC,EAAG,EAAG,IAVzB,mBAUNgC,GAVM,aAWShC,mBAAS,CAAC,EAAG,EAAG,IAXzB,mBAWNiC,GAXM,WA4BvB,OAfA9B,qBAAU,WACR6B,EAAYb,GACZc,EAAYb,KACX,CAACD,EAAWC,IAYR,M,OCVMc,EAxBA,WAEb,OACE,qCACE,8BAAcC,UAAW,KAIzB,4BACEC,YAAU,EACVC,cAAa,IACbC,uBAAsB,KACtBC,wBAAuB,W,4BCXVC,E,kDACnB,aAAe,uCACP,CACJC,SAAU,CACRC,MAAO,CAAEC,MAAO,GAChBC,YAAa,CAAED,MAAOE,KAAKC,IAAIvC,OAAOwC,iBAAkB,IACxDC,MAAO,CAAEL,MAAO,MAElBM,aAAa,+0BAoBbC,eAAe,wP,sCAWnB,WACE,OAAOC,KAAKV,SAASC,MAAMC,O,IAG7B,SAASS,GACPD,KAAKV,SAASC,MAAMC,MAAQS,M,GA5Ca9B,kBCE9B,SAAS+B,EAAT,GAAqD,IAAD,IAA/BC,aAA+B,MAAvB,GAAuB,EAAnBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC/CC,EAAS/B,mBADkD,EAGjBgC,mBAAQ,WAItD,IAHA,IAAMC,EAAgB,IAAIC,aAAqB,EAARN,GACjCO,EAAa,IAAID,aAAaN,GAC9BQ,EAAa,IAAIF,aAAqB,EAARN,GAC3BS,EAAI,EAAGA,EAAIT,EAAOS,IACzB,IAAIzC,UACsB,GAAvBuB,KAAKmB,SAAW,IACD,IAAhBnB,KAAKmB,SAAiB,EACE,GAAvBnB,KAAKmB,SAAW,KACjBC,QAAQN,EAAmB,EAAJI,GACzBF,EAAWE,GAAKlB,KAAKmB,SACrB,IAAI1C,UACF,IAAsB,GAAhBuB,KAAKmB,SAAgB,EAC3B,IAAsB,GAAhBnB,KAAKmB,SAAgB,GACX,GAAhBnB,KAAKmB,UACLC,QAAQH,EAAgB,EAAJC,GAExB,MAAO,CAACJ,EAAeE,EAAYC,KAClC,CAACR,IArB6D,mBAG1DK,EAH0D,KAG3CE,EAH2C,KAG/BC,EAH+B,KA0BjE,OAJAjC,QAAQC,IAAI,gBAAiB6B,GAC7BO,aAAS,SAACnC,EAAOoC,GACfV,EAAOW,QAAQC,MAAQF,EAAQ,KAG/B,yBAAQX,SAAUA,EAAUD,MAAOA,EAAnC,UACE,2CACE,iCACEe,aAAc,CAAC,aAAc,YAC7BhB,MAAOA,EACPiB,MAAOZ,EACPa,SAAU,IAEZ,iCACEF,aAAc,CAAC,aAAc,UAC7BhB,MAAOA,EACPiB,MAAOV,EACPW,SAAU,IAEZ,iCACEF,aAAc,CAAC,aAAc,SAC7BhB,MAAOA,EACPiB,MAAOT,EACPU,SAAU,OAGd,iCAAiBC,IAAKhB,EAAQiB,aAAW,EAACC,YAAY,MArBTrB,GDmBnDsB,YAAO,CAAEpC,oB,YEhDToC,YAAO,CAAEC,oBACT,IAiBeC,EAjBD,WAAO,IAAD,EACZC,EAAWrD,mBADC,EAEYC,cAAtBqD,EAFU,EAEVA,OAAQC,EAFE,EAEFA,GAAIrD,EAFF,EAEEA,MAMpB,OAJAsC,aAAS,YAAuB,EAApBgB,iBACZ/E,qBAAU,cAEP,WAACyB,EAAMsD,qBAAP,aAAC,EAAqBC,YAEvB,+BACEV,IAAKM,EACLK,OAAO,gBACPC,KAAM,CAACL,EAAQC,EAAGK,eCFlBC,EAAY,IACZC,EAAU,CACd,CACEC,KAAM,QACNC,QAAS,4BACTC,UAAW,SACXC,cAAe,KACfC,SAAU,IACVC,KAAM,EACNC,UAAW,CAASlD,KAAKmD,GAAK,IAAlB,KAAwB,EAAG,IAEzC,CACEP,KAAM,OACNC,QAAS,qBACTC,UAAW,KACXC,cAAe,IACfC,SAAU,IACVC,KAAM,EAAI,MACVC,UAAW,CAASlD,KAAKmD,GAAK,IAAlB,KAAwB,EAAG,IAEzC,CACEP,KAAM,UACNC,QAAS,wBACTC,UAAW,OACXC,cAAe,MACfC,SAAU,MACVC,KAAM,EAAI,OACVC,UAAW,CAASlD,KAAKmD,GAAK,IAAlB,IAAwB,EAAG,IAEzC,CACEP,KAAM,QACNC,QAAS,sBACTC,UAAW,IACXC,aAAc,YACdC,SAAU,MACVC,KAAM,EAAI,cACVC,UAAW,CAASlD,KAAKmD,GAAK,IAAlB,KAAwB,EAAG,IAEzC,CACEP,KAAM,OACNC,QAAS,qBACTC,UAAW,IACXC,cAAe,KACfC,SAAU,MACVC,KAAM,IACNC,UAAW,CAAUlD,KAAKmD,GAAK,IAAnB,MAAyB,EAAG,IAE1C,CACEP,KAAM,UACNC,QAAS,wBACTC,UAAW,KACXC,cAAe,KACfC,SAAU,MACVC,KAAM,MACNC,UAAW,CAASlD,KAAKmD,GAAK,IAAlB,KAAwB,EAAG,IAEzC,CACEP,KAAM,SACNC,QAAS,uBACTC,UAAW,MACXC,cAAe,OACfC,SAAU,MACVC,KAAM,KACNC,UAAW,CAAUlD,KAAKmD,GAAK,IAAnB,MAAyB,EAAG,IAE1C,CACEP,KAAM,SACNC,QAAS,uBACTC,UAAW,MACXC,cAAe,MACfC,SAAU,MACVC,KAAM,KACNC,UAAW,CAAUlD,KAAKmD,GAAK,IAAnB,MAAyB,EAAG,IAE1C,CACEP,KAAM,UACNC,QAAS,uBACTC,UAAW,MACXC,cAAe,MACfC,SAAU,MACVC,KAAM,KACNC,UAAW,CAAUlD,KAAKmD,GAAK,IAAnB,MAAyB,EAAG,KAGtCC,EAAa,GACbC,EAAS,CACb,CACEJ,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,aACNI,SAAU,GAEZ,CACEC,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,YACNI,SAAU,GAEZ,CACEC,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,eACNI,SAAU,GAEZ,CACEC,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,aACNI,SAAU,GAEZ,CACEC,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,YACNI,SAAU,GAEZ,CACEC,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,eACNI,SAAU,GAEZ,CACEC,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,cACNI,SAAU,GAEZ,CACEC,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,cACNI,SAAU,GAEZ,CACEC,KAAMN,EAAQ,GAAGK,SAAWI,EAC5BE,cAAeX,EAAQ,GAAGK,SAAWI,EACrCG,OAAQ,IACRC,MAAO,SACPZ,KAAM,eACNI,SAAU,IAId,SAASS,IACP,OAAOd,EAAQe,KAAI,SAACC,GAClB,OAAO,cAACC,EAAD,eAA8BD,GAAjBA,EAAOf,SAI/B,SAASiB,IACP,OAAOR,EAAOK,KAAI,SAACI,GACjB,OAAO,cAACC,EAAD,eAA2BD,GAAhBA,EAAMlB,SAI5B,SAASoB,IACP,IAAMnB,EAAUoB,YAAW,CACzBP,IAAKQ,kCAEP,OACE,uBAAMvD,SAAU,CAAC,EAAG,EAAG,GAAvB,UACE,sCAAsB6B,KAAM,CAACE,EAAW,GAAI,MAC5C,+CAAmBH,OAAO,YAAeM,OAK/C,SAASe,EAAT,GAQI,IAPFhB,EAOC,EAPDA,KACAG,EAMC,EANDA,aACAD,EAKC,EALDA,UACAG,EAIC,EAJDA,KACAJ,EAGC,EAHDA,QACAG,EAEC,EAFDA,SACAE,EACC,EADDA,UAEMiB,EAAgBF,YAAW,CAC/BP,IAAKQ,eAAyBrB,IAE1BjB,EAAM/C,mBAgBZ,OAfAwC,aAAS,YAAgB,IAAbtC,EAAY,EAAZA,MACNyC,EAAO4C,KAAKC,MAOhB,GANAzC,EAAIL,QAAQ+C,SAASC,GAAKxB,EAE1BnB,EAAIL,QAAQZ,SAAS6D,EACnBxE,KAAKyE,IAAIjD,GAAQ,GAAiB,IAAZsB,IAAoB,IAAQE,EACpDpB,EAAIL,QAAQZ,SAAS+D,EACnB1E,KAAK2E,IAAInD,GAAQ,GAAiB,IAAZsB,IAAoB,IAAQE,EACvC,SAATJ,EAAiB,CAAC,IAAD,EACbgC,EAAa,UAAG7F,EAAM8F,gBAAgB,gBAAzB,aAAG,EAAgClE,SACtDiB,EAAIL,QAAQZ,SAAS6D,EAAI5C,EAAIL,QAAQZ,SAAS6D,EAAII,EAAcJ,EAChE5C,EAAIL,QAAQZ,SAAS+D,EAAI9C,EAAIL,QAAQZ,SAAS+D,EAAIE,EAAcF,MAKlE,uBACEJ,SAAUpB,EACVN,KAAMA,EACNjC,SAAU,CAACqC,EAAU,EAAG,GACxBpB,IAAKA,EAJP,UAME,sCAAsBY,KAAM,CAACS,EAAM,GAAI,MACvC,kDAAsBV,OAAO,YAAe4B,OAKlD,SAASJ,EAAT,GAAuE,IAAvDd,EAAsD,EAAtDA,KAAMK,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,MAAOZ,EAAkB,EAAlBA,KAAMI,EAAY,EAAZA,SACxD,OACE,uBACEJ,KAAMA,EACN0B,SAAU,CAACtE,KAAKmD,GAAK,EAAG,EAAG,GAC3BxC,SAAU,CAACqC,EAAU,EAAG,GAH1B,UAKE,oCAAoBR,KAAM,CAACS,EAAMK,EAAeC,KAChD,sCAAsBhB,OAAO,WAAWuC,KAAMC,aAAYvB,MAAOA,OAKvE,SAASwB,IACP,IAAMpD,EAAM/C,mBAENoG,EAAchB,YAAW,CAC7BP,IAAKQ,sCASP,OANA7C,aAAS,YAAgB,IAAD,EAChB6D,EAAc,UADE,EAAZnG,MACmB8F,gBAAgB,iBAAzB,aAAG,EAAiClE,SACxDiB,EAAIL,QAAQZ,SAAS6D,EAAIU,EAAeV,EACxC5C,EAAIL,QAAQZ,SAAS+D,EAAIQ,EAAeR,KAIxC,uBACE9C,IAAKA,EACLjB,SAAU,CAAC,EAAG,EAAG,GACjBiC,KAAM,aACN0B,SAAU,CAAWtE,KAAKmD,GAAK,GAAnB,MAAuB,EAAG,GAJxC,UAME,qCAAqBX,KAAM,CAAC,GAAI,EAAG,EAAG,MACtC,2DAAmBD,OAAO,YAAe0C,GAAzC,IAAsDH,KAAMC,mBAIlE,IAmCeI,EAnCF,WACX,OACE,mCACE,eAAC,IAAD,CACEC,iBAAe,EACfC,MAAO,CAAEC,WAAY,WACrBnD,OAAQ,CAAExB,SAAU,CAAC,IAAK,GAAI,IAAK4E,KAAM,KAAOC,IAAK,KAHvD,UAKE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,+BACA,cAAC,EAAD,IACA,eAAC,WAAD,CACEC,SACE,cAACC,EAAA,EAAD,CAAMC,QAAM,EAAZ,SACE,cAACC,EAAA,EAAD,MAHN,UAOE,cAACnC,EAAD,IACA,cAACI,EAAD,IACA,cAACmB,EAAD,IACA,cAAChB,EAAD,OAEF,cAACxD,EAAD,CACEG,SAAU,CAAC,GAAI,IAAK,GACpBD,MAAO,IAAImF,MAAM,GAAGC,KAAK,KACzBrF,MAAO,YCzSFsF,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.690d8f56.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const useScrollDirection = () => {\n  const [direction, setDirection] = useState(null);\n\n  useEffect(() => {\n    const setFromEvent = (e) => setDirection(e.wheelDeltaY > 0);\n    window.addEventListener(\"wheel\", setFromEvent);\n\n    return () => {\n      window.removeEventListener(\"wheel\", setFromEvent);\n    };\n  }, []);\n\n  return direction;\n};\nexport default useScrollDirection;\n","import * as THREE from \"three\";\n\nconst createCameraSlice = (set, get) => ({\n  activeMesh: {},\n  setActiveMesh: () => {\n    set((mesh) => ({ activeMesh: mesh }));\n  },\n  shouldUpdate: true,\n  setShouldUpdate: () => {\n    set(() => ({ shouldUpdate: false }));\n  },\n  activeMeshName: \"Ship\",\n  cameraPos: [0, 0, 0 - 1],\n  cameraRos: [0, 0, 0],\n  targetPosition: new THREE.Vector3(-0.26, 0.57, 0),\n});\n\nexport default createCameraSlice;\n","import create from \"zustand\";\n\nimport createCameraSlice from \"./createCameraSlice\";\n\nconst useStore = create((set, get) => ({\n  ...createCameraSlice(set, get),\n}));\n\nexport default useStore;","import { PerspectiveCamera } from \"@react-three/drei\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useRef, useState, useEffect } from \"react\";\nimport useScrollDirection from \"../hooks/scrollDirection\";\nimport useStore from \"../store/useStore\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\n\nfunction CameraControl() {\n  const direction = useScrollDirection();\n  const cameraRef = useRef();\n\n  const { scene } = useThree();\n  console.log(direction);\n\n  const cameraPos = useStore((state) => state.cameraPos);\n  const cameraRos = useStore((state) => state.cameraRos);\n\n  const [position, setPosition] = useState([0, 0, 0]);\n  const [rotation, setRotation] = useState([0, 0, 0]);\n\n  useEffect(() => {\n    setPosition(cameraPos);\n    setRotation(cameraRos);\n  }, [cameraPos, cameraRos]);\n\n  // useFrame(({ camera }) => {\n  //   if (direction === false) {\n  //     //camera.position.lerp(new THREE.Vector3(0, 0, 0 - 1), 0.1);\n\n  //     //camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n  //     scene.orbitControls?.update();\n  //   }\n  // });\n\n  return null;\n}\n\nexport default CameraControl;\n","import { useThree } from \"@react-three/fiber\";\n\nconst Lights = () => {\n  \n  return (\n    <>\n      <ambientLight intensity={.7} />\n      {/* <pointLight castShadow position={[0, 0, 0]} />\n      <pointLight castShadow position={[0, -3, 0]} />\n      <pointLight castShadow position={[6, 3, 0]} /> */}\n      <pointLight\n        castShadow\n        shadow-bias={0.01}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n      {/* \n    \n      <directionalLight position={[3, 3, 3]} intensity={1.5} /> */}\n      {/* \n      \n      */}\n    </>\n  );\n};\n\nexport default Lights;\n","import * as THREE from 'three'\nimport { extend } from '@react-three/fiber'\n\nexport default class FireflyMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        uTime: { value: 0 },\n        uPixelRatio: { value: Math.min(window.devicePixelRatio, 2) },\n        uSize: { value: 5000 },\n      },\n      vertexShader: `\n      uniform float uPixelRatio;\n      uniform float uSize;\n      uniform float uTime;\n      attribute float aScale;    \n      attribute vec3 color;\n      varying vec3 vColor;\n\n      void main() {\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        modelPosition.y += sin(uTime + modelPosition.x * 100.0) * aScale * 0.2 * 20.0;\n        modelPosition.z += cos(uTime + modelPosition.x * 100.0) * aScale * 0.2 * 20.0;\n        modelPosition.x += cos(uTime + modelPosition.x * 100.0) * aScale * 0.2 * 20.0;\n        vec4 viewPosition = viewMatrix * modelPosition;\n        vec4 projectionPostion = projectionMatrix * viewPosition;    \n        gl_Position = projectionPostion;\n        gl_PointSize = uSize * aScale * uPixelRatio ;\n        gl_PointSize *= (1.0 / - viewPosition.z);\n        vColor = color;\n      }`,\n      fragmentShader: `\n      varying vec3 vColor;\n      void main() {\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n        float strength = 0.05 / distanceToCenter - 0.1;\n        \n        gl_FragColor = vec4(vColor, strength);\n      }`,\n    })\n  }\n\n  get time() {\n    return this.uniforms.uTime.value\n  }\n\n  set time(v) {\n    this.uniforms.uTime.value = v\n  }\n}\n\nextend({ FireflyMaterial })\n","import * as THREE from \"three\";\nimport React, { useRef, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport \"./FireflyMaterial\";\n\nexport default function Fireflies({ count = 40, scale, position }) {\n  const shader = useRef();\n\n  const [positionArray, scaleArray, colorArray] = useMemo(() => {\n    const positionArray = new Float32Array(count * 3);\n    const scaleArray = new Float32Array(count);\n    const colorArray = new Float32Array(count * 3);\n    for (let i = 0; i < count; i++) {\n      new THREE.Vector3(\n        (Math.random() - 0.5) * 4,\n        Math.random() * 1.5 * 2,\n        (Math.random() - 0.5) * 4\n      ).toArray(positionArray, i * 3);\n      scaleArray[i] = Math.random();\n      new THREE.Vector3(\n        215 - Math.random() * 10 * 3,\n        215 - Math.random() * 10 * 10,\n        Math.random() * 10\n      ).toArray(colorArray, i * 3);\n    }\n    return [positionArray, scaleArray, colorArray];\n  }, [count]);\n  console.log(\"positionArray\", positionArray);\n  useFrame((state, delta) => {\n    shader.current.time += delta / 2;\n  });\n  return (\n    <points position={position} scale={scale} key={count}>\n      <bufferGeometry>\n        <bufferAttribute\n          attachObject={[\"attributes\", \"position\"]}\n          count={count}\n          array={positionArray}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attachObject={[\"attributes\", \"aScale\"]}\n          count={count}\n          array={scaleArray}\n          itemSize={1}\n        />\n        <bufferAttribute\n          attachObject={[\"attributes\", \"color\"]}\n          count={count}\n          array={colorArray}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <fireflyMaterial ref={shader} transparent depthWrite={false} />\n    </points>\n  );\n}\n","import { useRef, useEffect } from \"react\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { extend, useThree, useFrame } from \"@react-three/fiber\";\nextend({ OrbitControls });\nconst Orbit = () => {\n  const controls = useRef();\n  const { camera, gl, scene } = useThree();\n \n  useFrame(({ orbitControls }) => {});\n  useEffect(()=> {\n    \n  }, [scene.orbitControls?.position0])\n  return (\n    <orbitControls\n      ref={controls}\n      attach=\"orbitControls\"\n      args={[camera, gl.domElement]}\n    />\n  );\n};\n\nexport default Orbit;\n","import \"./Home.css\";\n\nimport React, { Suspense, useRef } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { Html, Loader, useTexture } from \"@react-three/drei\";\n\nimport CameraControl from \"../CameraControl\";\nimport Lights from \"../Lights\";\n\nimport Fireflies from \"../Fireflies/Fireflies\";\nimport Orbit from \"../Orbit\";\nimport { DoubleSide } from \"three\";\n\n// import Sun from \"../Sun/Sun\";\nconst sunRadius = 109;\nconst planets = [\n  {\n    name: \"earth\",\n    texture: \"/texture_earth_clouds.jpg\",\n    orbitRate: 365.2565,\n    rotationRate: -0.015,\n    distance: 15 + sunRadius,\n    size: 1,\n    axialTilt: [23.4 * (Math.PI / 180), 0, 0],\n  },\n  {\n    name: \"moon\",\n    texture: \"/texture_moon.jpeg\",\n    orbitRate: 29.5,\n    rotationRate: -0.01,\n    distance: 1.8,\n    size: 1 / 3.667,\n    axialTilt: [6.68 * (Math.PI / 180), 0, 0],\n  },\n  {\n    name: \"mercury\",\n    texture: \"/texture_mercury.jpeg\",\n    orbitRate: 87.969,\n    rotationRate: -0.0061,\n    distance: 5.7 + sunRadius,\n    size: 1 / 2.6114,\n    axialTilt: [0.01 * (Math.PI / 180), 0, 0],\n  },\n  {\n    name: \"venus\",\n    texture: \"/texture_venus.jpeg\",\n    orbitRate: 225,\n    rotationRate: 0.00006172839,\n    distance: 10.8 + sunRadius,\n    size: 1 / 1.05292553191,\n    axialTilt: [2.64 * (Math.PI / 180), 0, 0],\n  },\n  {\n    name: \"mars\",\n    texture: \"/texture_mars.jpeg\",\n    orbitRate: 687,\n    rotationRate: -0.015,\n    distance: 22.7 + sunRadius,\n    size: 0.53,\n    axialTilt: [25.19 * (Math.PI / 180), 0, 0],\n  },\n  {\n    name: \"jupiter\",\n    texture: \"/texture_jupiter.jpeg\",\n    orbitRate: 4333,\n    rotationRate: -0.036,\n    distance: 88.8 + sunRadius,\n    size: 10.97,\n    axialTilt: [3.12 * (Math.PI / 180), 0, 0],\n  },\n  {\n    name: \"saturn\",\n    texture: \"/texture_saturn.jpeg\",\n    orbitRate: 10759,\n    rotationRate: -0.03529,\n    distance: 143.4 + sunRadius,\n    size: 9.14,\n    axialTilt: [26.73 * (Math.PI / 180), 0, 0],\n  },\n  {\n    name: \"uranus\",\n    texture: \"/texture_uranus.jpeg\",\n    orbitRate: 30660,\n    rotationRate: -0.0211,\n    distance: 287.3 + sunRadius,\n    size: 3.98,\n    axialTilt: [82.23 * (Math.PI / 180), 0, 0],\n  },\n  {\n    name: \"neptune\",\n    texture: \"/texture_uranus.jpeg\",\n    orbitRate: 60266,\n    rotationRate: -0.0225,\n    distance: 450.1 + sunRadius,\n    size: 3.86,\n    axialTilt: [28.33 * (Math.PI / 180), 0, 0],\n  },\n];\nconst orbitWidth = 0.1;\nconst orbits = [\n  {\n    size: planets[0].distance + orbitWidth,\n    innerDiameter: planets[0].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"earthOrbit\",\n    distance: 0,\n  },\n  {\n    size: planets[1].distance + orbitWidth,\n    innerDiameter: planets[1].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"moonOrbit\",\n    distance: 0,\n  },\n  {\n    size: planets[2].distance + orbitWidth,\n    innerDiameter: planets[2].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"mercuryOrbit\",\n    distance: 0,\n  },\n  {\n    size: planets[3].distance + orbitWidth,\n    innerDiameter: planets[3].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"venusOrbit\",\n    distance: 0,\n  },\n  {\n    size: planets[4].distance + orbitWidth,\n    innerDiameter: planets[4].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"marsOrbit\",\n    distance: 0,\n  },\n  {\n    size: planets[5].distance + orbitWidth,\n    innerDiameter: planets[5].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"jupiterOrbit\",\n    distance: 0,\n  },\n  {\n    size: planets[6].distance + orbitWidth,\n    innerDiameter: planets[6].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"saturnOrbit\",\n    distance: 0,\n  },\n  {\n    size: planets[7].distance + orbitWidth,\n    innerDiameter: planets[7].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"uranusOrbit\",\n    distance: 0,\n  },\n  {\n    size: planets[8].distance + orbitWidth,\n    innerDiameter: planets[8].distance - orbitWidth,\n    facets: 320,\n    color: 0xffffff,\n    name: \"neptuneOrbit\",\n    distance: 0,\n  },\n];\n\nfunction SolarSystem() {\n  return planets.map((planet) => {\n    return <Planet key={planet.name} {...planet} />;\n  });\n}\n\nfunction OrbitSystem() {\n  return orbits.map((orbit) => {\n    return <Ring key={orbit.name} {...orbit} />;\n  });\n}\n\nfunction Sun() {\n  const texture = useTexture({\n    map: process.env.PUBLIC_URL + \"/texture_sun.jpeg\",\n  });\n  return (\n    <mesh position={[0, 0, 0]}>\n      <sphereBufferGeometry args={[sunRadius, 48, 48]} />\n      <meshPhongMaterial attach=\"material\" {...texture} />\n    </mesh>\n  );\n}\n\nfunction Planet({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  distance,\n  axialTilt,\n}) {\n  const planetTexture = useTexture({\n    map: process.env.PUBLIC_URL + texture,\n  });\n  const ref = useRef();\n  useFrame(({ scene }) => {\n    let time = Date.now();\n    ref.current.rotation.y += rotationRate;\n\n    ref.current.position.x =\n      Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distance;\n    ref.current.position.z =\n      Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distance;\n    if (name === \"moon\") {\n      const earthPosition = scene.getObjectByName(\"earth\")?.position;\n      ref.current.position.x = ref.current.position.x + earthPosition.x;\n      ref.current.position.z = ref.current.position.z + earthPosition.z;\n    }\n  });\n\n  return (\n    <mesh\n      rotation={axialTilt}\n      name={name}\n      position={[distance, 0, 0]}\n      ref={ref}\n    >\n      <sphereBufferGeometry args={[size, 48, 48]} />\n      <meshStandardMaterial attach=\"material\" {...planetTexture} />\n    </mesh>\n  );\n}\n\nfunction Ring({ size, innerDiameter, facets, color, name, distance }) {\n  return (\n    <mesh\n      name={name}\n      rotation={[Math.PI / 2, 0, 0]}\n      position={[distance, 0, 0]}\n    >\n      <ringBufferGeometry args={[size, innerDiameter, facets]} />\n      <meshStandardMaterial attach=\"material\" side={DoubleSide} color={color} />\n    </mesh>\n  );\n}\n\nfunction SaturnRing() {\n  const ref = useRef();\n\n  const ringTexture = useTexture({\n    map: process.env.PUBLIC_URL + \"/texture_jupiter.jpeg\",\n  });\n\n  useFrame(({ scene }) => {\n    const saturnPosition = scene.getObjectByName(\"saturn\")?.position;\n    ref.current.position.x = saturnPosition.x;\n    ref.current.position.z = saturnPosition.z;\n  });\n\n  return (\n    <mesh\n      ref={ref}\n      position={[0, 0, 0]}\n      name={'saturnRing'}\n      rotation={[-26.73 * (Math.PI / 2), 0, 0]}\n    >\n      <torusBufferGeometry args={[20, 4, 2, 50]} />\n      <meshBasicMaterial attach=\"material\" {...ringTexture} side={DoubleSide} />\n    </mesh>\n  );\n}\nconst Home = () => {\n  return (\n    <>\n      <Canvas\n        colorManagement\n        style={{ background: \"#232323\" }}\n        camera={{ position: [30, -30, 30], near: 0.001, far: 100000 }}\n      >\n        <Lights />\n        <CameraControl />\n        <axesHelper />\n        <Orbit />\n        <Suspense\n          fallback={\n            <Html center>\n              <Loader />\n            </Html>\n          }\n        >\n          <SolarSystem />\n          <OrbitSystem />\n          <SaturnRing/>\n          <Sun />\n        </Suspense>\n        <Fireflies\n          position={[0, -400, 0]}\n          scale={new Array(3).fill(300)}\n          count={2000}\n        />\n      </Canvas>\n      {/* <ScrollBar domContent={domContent} /> */}\n    </>\n  );\n};\n\nexport default Home;\n\n// <SectionContent positionY={250}>\n// <mesh position={[677.6, 1157, 894.5]} rotation={[0, -1, 0]}>\n//   <Spaceship scale={new Array(3).fill(0.75)} />\n// </mesh>\n\n// <Html fullscreen className=\"html-wrapper\">\n//   <div className=\"container section_1\">\n//     <div className=\"text1\">\n//       Learn something new\n//       <h1 className=\"text2\">\n//         THE UNIVERSE <br />\n//       </h1>\n//     </div>\n//   </div>\n// </Html>\n// </SectionContent>\n// useFrame(() => {\n//\n//   const position = ref.current.position,\n//     angle = 125, //angle in degrees\n//     speed = 2.5;\n\n//   const angleRad = angle * (Math.PI / 180); //angle in radians\n//   if (position.z < 85) {\n//     position.x = position.x + speed * Math.cos(angleRad);\n//     position.z = position.z + speed * Math.sin(angleRad);\n//   }\n// });\n","import \"./App.css\";\n\nimport Home from \"./components/Home/Home\";\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}