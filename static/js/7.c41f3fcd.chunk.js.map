{"version":3,"sources":["components/OrbitRing.js","components/Earth.js","components/SaturnRing.js","components/Planet.js","components/Moon.js","components/Sun/shaderSun/SunMaterial.js","components/Sun/shaderSun/vertex.glsl.js","components/Sun/shaderSun/fragment.glsl.js","components/Sun/shaderPerlin/PerlinMaterial.js","components/Sun/shaderPerlin/vertex.glsl.js","components/Sun/shaderPerlin/fragment.glsl.js","components/Sun/shaderAround/AroundMaterial.js","components/Sun/shaderAround/vertex.glsl.js","components/Sun/shaderAround/fragment.glsl.js","components/Sun/Sun.js","components/NormalSun.js","components/SolarSystem.js"],"names":["OrbitRing","radius","layers","useMemo","generatePointCircle","vertices","Line","points","color","lineWidth","Earth","name","rotationRate","orbitRate","size","texture","axialTilt","bumpMap","earthCloud","specularMap","distanceScale","planetGeometry","planetMaterial","useTexture","map","cloudMaterial","ref","useRef","activePlanetName","useStore","state","activePlanet","useFrame","scene","time","Date","now","current","rotation","y","position","x","Math","sin","z","cos","scale","attach","fog","shininess","bumpScale","specular","THREE","args","transparent","SaturnRing","ringTexture","ringtexture","saturnPosition","getObjectByName","PI","Planet","earthPosition","userData","Moon","sphere","orbit","useThree","moonPosition","MoonOrbit","geometry","SunMaterial","extensions","derivatives","side","uniforms","value","resolution","vertexShader","fragmentShader","this","v","extend","PerlinMaterial","uPerlin","AroundMaterial","viewVector","type","blending","Sun","shaderPerlin","shaderSun","shaderAround","cubeCamera","format","generateMipmaps","minFilter","encoding","target","delta","update","gl","sunGeometry","NormalSun","sunData","emissive","emissiveIntensity","SolarSystem","browserName","browser","camera","earthData","moonData","planets","planet"],"mappings":"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","file":"static/js/7.c41f3fcd.chunk.js","sourcesContent":["import { useMemo } from \"react\";\nimport { Line } from \"@react-three/drei\";\nimport { generatePointCircle } from \"../utilities/helper\";\nfunction OrbitRing({ radius, layers = 0 }) {\n  const [vertices] = useMemo(() => {\n    const vertices = generatePointCircle(radius);\n    return [vertices];\n  }, [radius]);\n\n  return (\n    <Line layers={layers} points={vertices} color=\"white\" lineWidth={0.1} />\n  );\n}\n\nexport default OrbitRing;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\nimport * as THREE from \"three\";\nimport OrbitRing from \"./OrbitRing\";\nfunction Earth({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  axialTilt,\n  bumpMap,\n  specularMap,\n  earthCloud,\n  distanceScale,\n  planetGeometry,\n}) {\n  const planetMaterial = useTexture({\n    map: texture,\n    bumpMap: bumpMap,\n  });\n  const cloudMaterial = useTexture({\n    map: earthCloud,\n  });\n  const ref = useRef();\n  const activePlanetName = useStore((state) => state.activePlanet?.name);\n\n  useFrame(({ scene }) => {\n    const time = Date.now();\n    if (activePlanetName !== name) {\n      if (activePlanetName !== \"moon\") {\n        ref.current.rotation.y += rotationRate * 0.1; //scale by 1/10 ratation speed\n        ref.current.position.x =\n          Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n        ref.current.position.z =\n          Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n      }\n    }\n  });\n\n  return (\n    <>\n      <mesh\n        layers={2}\n        scale={size}\n        rotation={axialTilt}\n        name={name}\n        position={[distanceScale, 0, 0]}\n        ref={ref}\n      >\n        {planetGeometry}\n        <meshStandardMaterial\n          attach=\"material\"\n          fog={false}\n          {...planetMaterial}\n          shininess={0}\n          bumpScale={0.005}\n          specular={new THREE.Color(\"grey\")}\n        />\n        <mesh layers={2}>\n          <sphereBufferGeometry args={[size + 0.005, 48, 48]} />\n          <meshStandardMaterial\n            {...cloudMaterial}\n            fog={false}\n            attach=\"material\"\n            transparent={true}\n          />\n        </mesh>\n      </mesh>\n\n      <OrbitRing radius={distanceScale} layers={2} />\n    </>\n  );\n}\n\nexport default Earth;\n","import { useRef } from \"react\";\nimport { useTexture } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\n\nimport ringtexture from \"../assets/textures/texture_jupiter.jpeg\";\nfunction SaturnRing({ layers }) {\n  const ref = useRef();\n\n  const ringTexture = useTexture({\n    map: ringtexture,\n  });\n\n  useFrame(({ scene }) => {\n    const saturnPosition = scene.getObjectByName(\"saturn\")?.position;\n    ref.current.position.x = saturnPosition.x;\n    ref.current.position.z = saturnPosition.z;\n  });\n\n  return (\n    <mesh\n      layers={layers}\n      ref={ref}\n      position={[0, 0, 0]}\n      name={\"saturnRing\"}\n      rotation={[-26.73 * (Math.PI / 2), 0, 0]}\n    >\n      <torusBufferGeometry args={[20, 4, 2, 50]} />\n      <meshBasicMaterial attach=\"material\" {...ringTexture}  />\n    </mesh>\n  );\n}\n\nexport default SaturnRing;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\nimport OrbitRing from \"./OrbitRing\";\nimport SaturnRing from \"./SaturnRing\";\n\nfunction Planet({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  distanceScale,\n  axialTilt,\n  layers,\n  planetGeometry,\n}) {\n  const planetMaterial = useTexture({ map: texture });\n  const ref = useRef();\n  const activePlanetName = useStore((state) => state.activePlanet?.name);\n\n  useFrame(({ scene }) => {\n    const time = Date.now();\n    ref.current.rotation.y += rotationRate * 0.1; //scale by 1/10 ratation speed;\n\n    if (name !== activePlanetName) {\n      ref.current.position.x =\n        Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n      ref.current.position.z =\n        Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n      if (name === \"moon\") {\n        const earthPosition = scene.getObjectByName(\"earth\")?.position;\n        ref.current.position.x = ref.current.position.x + earthPosition.x;\n        ref.current.position.z = ref.current.position.z + earthPosition.z;\n      }\n    }\n  });\n\n  return (\n    <group>\n      <mesh\n        userData={true}\n        layers={layers}\n        scale={size}\n        rotation={axialTilt}\n        name={name}\n        position={[distanceScale, 0, 0]}\n        ref={ref}\n      >\n        {planetGeometry}\n        <meshStandardMaterial\n          attach=\"material\"\n          {...planetMaterial}\n          shininess={0}\n          bumpScale={0.3}\n        />\n      </mesh>\n      <OrbitRing radius={distanceScale} layers={layers} />\n      {name === \"saturn\" && <SaturnRing layers={layers} />}\n    </group>\n  );\n}\n\nexport default Planet;\n","import React, { useRef } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\nimport OrbitRing from \"./OrbitRing\";\n\nfunction Moon({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  distanceScale,\n  axialTilt,\n  planetGeometry,\n  layers,\n  sphere,\n}) {\n  const planetMaterial = useTexture({ map: texture });\n  const ref = useRef();\n  const orbit = useRef();\n\n  const activePlanetName = useStore((state) => state.activePlanet?.name);\n\n  const { scene } = useThree();\n  const earthPosition = scene.getObjectByName(\"earth\")?.position;\n  const moonPosition = scene.getObjectByName(\"moon\")?.position;\n\n  const MoonOrbit = () => {\n    return <OrbitRing radius={2.5} />;\n  };\n  useFrame(() => {\n    const time = Date.now();\n    ref.current.rotation.y += rotationRate * 0.1; //scale by 1/10 ratation speed;\n\n    if (name !== activePlanetName) {\n      ref.current.position.x =\n        Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n      ref.current.position.z =\n        Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n\n      ref.current.position.x = earthPosition.x + ref.current.position.x / 10;\n      ref.current.position.z = earthPosition.z + ref.current.position.z / 10;\n\n      orbit.current.position.x = earthPosition.x;\n      orbit.current.position.z = earthPosition.z;\n    }\n  });\n\n  return (\n    <group>\n      <mesh\n        geometry={sphere}\n        layers={layers}\n        scale={size}\n        rotation={axialTilt}\n        name={name}\n        position={[0, 0, 0]}\n        ref={ref}\n      >\n        {planetGeometry}\n        <meshStandardMaterial\n          attach=\"material\"\n          {...planetMaterial}\n          shininess={0}\n          bumpScale={0.3}\n        />\n      </mesh>\n      {earthPosition && moonPosition && (\n        <mesh ref={orbit}>\n          <MoonOrbit />\n        </mesh>\n      )}\n    </group>\n  );\n}\n\nexport default Moon;\n","import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\nimport vertex from \"./vertex.glsl.js\";\nimport fragment from \"./fragment.glsl.js\";\n\nexport default class SunMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives: enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { value: 0 },\n        resolution: {\n          value: new THREE.Vector4(),\n        },\n        \n      },\n      vertexShader: vertex(),\n      fragmentShader: fragment(),\n    });\n  }\n\n\n  get time() {\n    return this.uniforms.time.value\n  }\n\n  set time(v) {\n    this.uniforms.time.value = v\n  }\n\n}\n\nextend({ SunMaterial });\n","export default function vertex() {\n  return `\n    uniform float time;\n    varying vec3 vPosition;\n \n    uniform vec2 pixels;\n    float PI = 3.14159265359;\n    void main() {\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); \n    }\n`;\n}\n","export default function fragment() {\n  return `\n  uniform float time; \n  uniform float progress; \n  uniform sampler2D texture1;\n  uniform vec4 resolution;\n  varying vec3 vPosition;\n\n  float PI = 3.14159265359;\n    \n  // Description : Array and textureless GLSL 2D/3D/4D simplex \n  //               noise functions.\n  //      Author : Ian McEwan, Ashima Arts.\n  //  Maintainer : stegu\n  //     Lastmod : 20110822 (ijm)\n  //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n  //               Distributed under the MIT License. See LICENSE file.\n  //               https://github.com/ashima/webgl-noise\n  //               https://github.com/stegu/webgl-noise\n  // \n\n  vec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\n  float mod289(float x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\n  vec4 permute(vec4 x) {\n      return mod289(((x*34.0)+10.0)*x);\n  }\n\n  float permute(float x) {\n      return mod289(((x*34.0)+10.0)*x);\n  }\n\n  vec4 taylorInvSqrt(vec4 r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  float taylorInvSqrt(float r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  vec4 grad4(float j, vec4 ip)\n    {\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n    vec4 p,s;\n\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n    s = vec4(lessThan(p, vec4(0.0)));\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n    return p;\n    }\n              \n  // (sqrt(5) - 1)/4 = F4, used once below\n  #define F4 0.309016994374947451\n\n  float snoise(vec4 v)\n    {\n    const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                          0.276393202250021,  // 2 * G4\n                          0.414589803375032,  // 3 * G4\n                        -0.447213595499958); // -1 + 4 * G4\n\n  // First corner\n    vec4 i  = floor(v + dot(v, vec4(F4)) );\n    vec4 x0 = v -   i + dot(i, C.xxxx);\n\n  // Other corners\n\n  // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n    vec4 i0;\n    vec3 isX = step( x0.yzw, x0.xxx );\n    vec3 isYZ = step( x0.zww, x0.yyz );\n  //  i0.x = dot( isX, vec3( 1.0 ) );\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n  //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    // i0 now contains the unique values 0,1,2,3 in each channel\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n    //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n    //  x1 = x0 - i1  + 1.0 * C.xxxx\n    //  x2 = x0 - i2  + 2.0 * C.xxxx\n    //  x3 = x0 - i3  + 3.0 * C.xxxx\n    //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n    vec4 x1 = x0 - i1 + C.xxxx;\n    vec4 x2 = x0 - i2 + C.yyyy;\n    vec4 x3 = x0 - i3 + C.zzzz;\n    vec4 x4 = x0 + C.wwww;\n\n  // Permutations\n    i = mod289(i); \n    float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n    vec4 j1 = permute( permute( permute( permute (\n              i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n            + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n            + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n            + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n  // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n  // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n    vec4 p0 = grad4(j0,   ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n  // Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt(dot(p4,p4));\n\n  // Mix contributions from the five corners\n    vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n    vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n    m0 = m0 * m0;\n    m1 = m1 * m1;\n    return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n    }\n\n    float fbm(vec4 p) {\n      float sum = 0.;\n      float amp = 1.;\n      float scale = 1.;\n      for(int i = 0;i < 8;i++) {\n        sum += snoise(p*scale)*amp;\n        p.w += 100.;\n        amp *= .9;\n        scale += 2.;\n      }\n      return sum;\n    }\n  void main() {\n    vec4 p = vec4(vPosition*.4,time*0.05);\n    float noisy = fbm(p);\n\n    vec4 p1 = vec4(vPosition*.2,time*.05);\n    float spots = max(snoise(p1), 0.);\n\n    gl_FragColor = vec4(noisy);\n    gl_FragColor *= mix(1., spots, 0.5);\n  }\n  `\n}\n","import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\nimport vertex from \"./vertex.glsl.js\";\nimport fragment from \"./fragment.glsl.js\";\n\nexport default class PerlinMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      extensions: {\n        derivatives: true,\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { value: 0 },\n        uPerlin: { value: null },\n        resolution: {\n          value: new THREE.Vector4(),\n        },\n      },\n      vertexShader: vertex(),\n      fragmentShader: fragment(),\n    });\n  }\n\n  get time() {\n    return this.uniforms.time.value;\n  }\n\n  set time(v) {\n    this.uniforms.time.value = v;\n  }\n\n  get uPerlin() {\n    return this.uniforms.uPerlin.value;\n  }\n\n  set uPerlin(v) {\n    this.uniforms.uPerlin.value = v;\n  }\n\n}\n\nextend({ PerlinMaterial });\n","export default function vertex() {\n  return `\n    uniform float time;\n    uniform vec2 pixels;\n    float PI = 3.14159265359;\n    \n    varying vec3 vLayer0;\n    varying vec3 vLayer1;\n    varying vec3 vLayer2;\n  \n    varying vec3 eyeVector;\n    varying vec3 vNormal;\n\n    mat2 rotate(float a) {\n      float s = sin(a);\n      float c = cos(a);\n      return mat2(c, -s, s, c);\n    }\n    \n    void main() {\n      vNormal = normal;\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      eyeVector = normalize(worldPosition.xyz - cameraPosition);\n\n      float t = time*.005;\n\n      mat2 rot = rotate(t);\n      vec3 p0 = position;      \n      p0.yz = rot*p0.yz;\n      vLayer0 = p0;\n\n      mat2 rot1 = rotate(t*1.5 + 10.);\n      vec3 p1 = position;      \n      p1.xz = rot1*p1.xz;\n      vLayer1 = p1;\n\n      mat2 rot2 = rotate(t*2.0 + 30.);\n      vec3 p2 = position;      \n      p2.xy = rot2*p2.xy;\n      vLayer2 = p2;\n\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); \n    }\n`;\n}\n","export default function fragment() {\n  return `\n  uniform float time; \n  uniform float progress; \n  uniform sampler2D texture1;\n  uniform vec4 resolution;\n  uniform samplerCube uPerlin;\n\n  varying vec3 eyeVector;\n  varying vec3 vNormal;\n\n  float PI = 3.14159265359;\n  \n  varying vec3 vLayer0;\n  varying vec3 vLayer1;\n  varying vec3 vLayer2;\n\n  float Fresnel(vec3 eyeVector, vec3 worldNormal) {\n    return pow(1.0 + dot(eyeVector, worldNormal),3.0);\n  }\n\n  vec3 brightnessToColor(float b) {\n    b *= 0.25;\n    return (vec3(b, b*b, b*b*b*b)/0.25)*0.6;\n  }\n  \n  float supersun() {\n    float sum = 0.;\n    sum += textureCube(uPerlin, vLayer0).r;\n    sum += textureCube(uPerlin, vLayer1).r;\n    sum += textureCube(uPerlin, vLayer2).r;\n    sum += 0.33;\n    return sum;\n  }\n\n  void main() {\n   float brightness = supersun();\n   brightness = brightness*.9 + 1.;\n\n   float fres = Fresnel(eyeVector, vNormal);\n\n   brightness += pow(fres,2.8);\n\n   vec3 col = brightnessToColor(brightness);\n\n   gl_FragColor = vec4(col,1.0);\n\n  }\n  `;\n}\n","import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\nimport vertex from \"./vertex.glsl.js\";\nimport fragment from \"./fragment.glsl.js\";\n\nexport default class AroundMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      side: THREE.BackSide,\n      uniforms: {\n        viewVector: { type: \"v3\", value: new THREE.Vector3(0, 0, 0) },\n      },\n      vertexShader: vertex(),\n      fragmentShader: fragment(),\n      blending: THREE.AdditiveBlending,\n      transparent: true,\n    });\n  }\n\n  get viewVector() {\n    return this.uniforms.viewVector.value;\n  }\n\n  set viewVector(v) {\n    this.uniforms.viewVector.value = v;\n  }\n}\n\nextend({ AroundMaterial });\n","export default function vertex() {\n  return `\n  varying vec3 vNormal;\n\n  void main() \n  {\n    vNormal = normalize( normalMatrix * normal );\n \n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }\n`;\n}\n","export default function fragment() {\n  return `\n  varying vec3 vNormal;\n\n  vec3 brightnessToColor(float b) {\n    b *= 0.25;\n    return (vec3(b, b*b, b*b*b*b)/0.25)*0.6;\n  }\n\n  void main() \n  {\n    float radial = 1. - vNormal.z;\n    radial *= radial*radial;\n   \n    float brightness = 1. + radial*.4 ;\n    vec3 glow = brightnessToColor(brightness)*radial ;\n\n    gl_FragColor.rgb = glow;\n    gl_FragColor.a = radial;\n\n  }\n  `;\n}\n","import { useRef, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\n\nimport \"./shaderSun/SunMaterial\";\nimport \"./shaderPerlin/PerlinMaterial\";\nimport \"./shaderAround/AroundMaterial\";\nimport useStore from \"../../store/useStore\";\n\nfunction Sun() {\n  const shaderPerlin = useRef();\n  const shaderSun = useRef();\n  const shaderAround = useRef();\n\n  const cubeCamera = useRef();\n\n\n  const activePlanet = useStore((state) => state.activePlanet);\n\n  const [target] = useMemo(() => {\n    const target = new THREE.WebGLCubeRenderTarget(256, {\n      format: THREE.RGBFormat,\n      generateMipmaps: true,\n      minFilter: THREE.LinearMipMapLinearFilter,\n      encoding: THREE.sRGBEncoding,\n    });\n    return [target];\n  }, []);\n\n  useFrame((state, delta) => {\n    shaderSun.current.time += delta;\n\n    shaderPerlin.current.time += delta;\n    shaderPerlin.current.uPerlin = target.texture;\n\n    cubeCamera.current.update(state.gl, state.scene);\n  });\n  const sunGeometry = useMemo(\n    () => <sphereBufferGeometry args={[25, 40, 40]} />,\n    []\n  );\n  return (\n    <>\n      <mesh layers={1} name=\"sun\" position={[0, 0, 0]}>\n        {sunGeometry}\n        <sunMaterial ref={shaderSun} />\n      </mesh>\n      {activePlanet && activePlanet.name === \"sun\" && (\n        <mesh>\n          <sphereBufferGeometry args={[30, 30, 30]} />\n          <aroundMaterial ref={shaderAround} />\n        </mesh>\n      )}\n\n      <mesh layers={1}>\n        <cubeCamera\n          layers={1}\n          name=\"cubeCamera\"\n          ref={cubeCamera}\n          position={[0, 0, 0]}\n          args={[0.1, 26, target]}\n        ></cubeCamera>\n        {sunGeometry}\n        <perlinMaterial ref={shaderPerlin} />\n      </mesh>\n    </>\n  );\n}\n\nexport default Sun;\n","import React, { useRef } from \"react\";\nimport { useTexture } from \"@react-three/drei\";\nimport { sunData } from \"../utilities/planetData\";\nfunction NormalSun({ planetGeometry }) {\n  const planetMaterial = useTexture({ map: sunData.texture });\n  const ref = useRef();\n\n  return (\n    <mesh\n      layers={sunData.layers}\n      scale={sunData.size}\n      name={sunData.name}\n      position={[0, 0, 0]}\n      ref={ref}\n    >\n      {planetGeometry}\n      <meshPhongMaterial\n        emissive=\"#fc9601\"\n        emissiveIntensity={0.7}\n        attach=\"material\"\n        {...planetMaterial}\n      />\n    </mesh>\n  );\n}\n\nexport default NormalSun;\n","import { planets, earthData, moonData } from \"../utilities/planetData\";\nimport Earth from \"./Earth\";\nimport Planet from \"./Planet\";\nimport Moon from \"./Moon\";\nimport Sun from \"./Sun/Sun\";\n\nimport { useFrame } from \"@react-three/fiber\";\nimport { useMemo } from \"react\";\nimport { browser } from \"../utilities/helper\";\nimport NormalSun from \"./NormalSun\";\nfunction SolarSystem() {\n  const planetGeometry = useMemo(\n    () => <sphereBufferGeometry args={[1, 40, 40]} />,\n    []\n  );\n\n  const browserName = browser.name;\n  useFrame(({ camera }) => {});\n  return (\n    <>\n      {browserName === \"safari\" ? (\n        <NormalSun planetGeometry={planetGeometry} />\n      ) : (\n        <Sun />\n      )}\n\n      <Earth\n        key={earthData.name}\n        {...earthData}\n        planetGeometry={planetGeometry}\n      />\n\n      <Moon key={moonData.name} planetGeometry={planetGeometry} {...moonData} />\n\n      {planets.map((planet) => {\n        return (\n          <Planet\n            key={planet.name}\n            planetGeometry={planetGeometry}\n            {...planet}\n          />\n        );\n      })}\n\n    </>\n  );\n}\n\nexport default SolarSystem;\n"],"sourceRoot":""}