{"version":3,"sources":["../node_modules/@react-three/drei/core/useTexture.js","components/OrbitRing.js","components/Earth.js","components/Planet.js","components/SaturnRing.js","components/SolarSystem.js"],"names":["IsObject","url","Object","Array","isArray","useTexture","input","textures","useLoader","TextureLoader","values","keys","keyed","forEach","key","assign","indexOf","preload","clear","OrbitRing","size","innerDiameter","facets","color","name","distance","rotation","Math","PI","position","args","attach","side","DoubleSide","Earth","rotationRate","orbitRate","texture","axialTilt","bumpMap","specularMap","earthCloud","planetMaterial","map","cloudMaterial","ref","useRef","activePlanetName","useStore","state","activePlanet","useFrame","scene","time","Date","now","current","y","x","sin","z","cos","shininess","bumpScale","specular","THREE","transparent","earthData","orbitData","Planet","planetGeometry","earthPosition","getObjectByName","scale","SaturnRing","ringTexture","ringtexture","saturnPosition","SolarSystem","moonData","planets","planet"],"mappings":"yKAGMA,EAAW,SAAAC,GAAG,OAAIA,IAAQC,OAAOD,KAASE,MAAMC,QAAQH,IAAuB,oBAARA,GAC7E,SAASI,EAAWC,GAClB,IAAMC,EAAWC,YAAUC,gBAAeT,EAASM,GAASJ,OAAOQ,OAAOJ,GAASA,GAEnF,GAAIN,EAASM,GAAQ,CACnB,IAAMK,EAAOT,OAAOS,KAAKL,GACnBM,EAAQ,GAId,OAHAD,EAAKE,SAAQ,SAAAC,GAAG,OAAIZ,OAAOa,OAAOH,EAAdV,OAAA,IAAAA,CAAA,GACjBY,EAAMP,EAASI,EAAKK,QAAQF,SAExBF,EAEP,OAAOL,EAIXF,EAAWY,QAAU,SAAAhB,GAAG,OAAIO,IAAUS,QAAQR,gBAAeR,IAG7DI,EAAWa,MAAQ,SAAAZ,GAAK,OAAIE,IAAUU,MAAMT,gBAAeH,K,yGCP5Ca,MAbf,YAA4E,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAC7D,OACE,uBACED,KAAMA,EACNE,SAAU,CAACC,KAAKC,GAAK,EAAG,EAAG,GAC3BC,SAAU,CAACJ,EAAU,EAAG,GAH1B,UAKE,oCAAoBK,KAAM,CAACV,EAAMC,EAAeC,KAChD,sCAAsBS,OAAO,WAAWC,KAAMC,aAAYV,MAAOA,QCiExDW,MAnEf,YAWI,IAVFV,EAUC,EAVDA,KACAW,EASC,EATDA,aACAC,EAQC,EARDA,UACAhB,EAOC,EAPDA,KACAiB,EAMC,EANDA,QACAZ,EAKC,EALDA,SACAa,EAIC,EAJDA,UACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,YACAC,EACC,EADDA,WAEMC,EAAiBrC,YAAW,CAChCsC,IAAKN,EACLE,QAASA,EACTC,YAAaA,IAETI,EAAgBvC,YAAW,CAC/BsC,IAAKF,IAEDI,EAAMC,mBACNC,EAAmBC,aACvB,SAACC,GAAD,OAAWA,EAAMC,aAAaH,oBAchC,OAXAI,aAAS,YAAe,EAAZC,MAAa,IACjBC,EAAOC,KAAKC,MACdR,IAAqBvB,IACvBqB,EAAIW,QAAQ9B,SAAS+B,GAAoB,GAAftB,EAC1BU,EAAIW,QAAQ3B,SAAS6B,EACnB/B,KAAKgC,IAAIN,GAAQ,GAAiB,IAAZjB,IAAoB,IAAQX,EACpDoB,EAAIW,QAAQ3B,SAAS+B,EACnBjC,KAAKkC,IAAIR,GAAQ,GAAiB,IAAZjB,IAAoB,IAAQX,MAKtD,kCACE,uBACEC,SAAUY,EACVd,KAAMA,EACNK,SAAU,CAACJ,EAAU,EAAG,GACxBoB,IAAKA,EAJP,UAME,sCAAsBf,KAAM,CAACV,EAAM,GAAI,MACvC,2DACEW,OAAO,YACHW,GAFN,IAGEoB,UAAW,EACXC,UAAW,KACXC,SAAU,IAAIC,QAAY,WAE5B,iCACE,sCAAsBnC,KAAM,CAACV,EAAO,KAAO,GAAI,MAC/C,6DACMwB,GADN,IAEEb,OAAO,WACPmC,aAAa,WAKnB,cAAC,EAAD,eAAeC,IAAUC,gBCRhBC,MAxDf,YAUI,IATF7C,EASC,EATDA,KACAW,EAQC,EARDA,aACAC,EAOC,EAPDA,UACAhB,EAMC,EANDA,KACAiB,EAKC,EALDA,QACAZ,EAIC,EAJDA,SACAa,EAGC,EAHDA,UACA8B,EAEC,EAFDA,UACAE,EACC,EADDA,eAEM5B,EAAiBrC,YAAW,CAAEsC,IAAKN,IACnCQ,EAAMC,mBACNC,EAAmBC,aACvB,SAACC,GAAD,OAAWA,EAAMC,aAAaH,oBAoBhC,OAjBAI,aAAS,YAAgB,IAAbC,EAAY,EAAZA,MACJC,EAAOC,KAAKC,MAGlB,GAFAV,EAAIW,QAAQ9B,SAAS+B,GAAoB,GAAftB,EAEtBX,IAASuB,IACXF,EAAIW,QAAQ3B,SAAS6B,EACnB/B,KAAKgC,IAAIN,GAAQ,GAAiB,IAAZjB,IAAoB,IAAQX,EACpDoB,EAAIW,QAAQ3B,SAAS+B,EACnBjC,KAAKkC,IAAIR,GAAQ,GAAiB,IAAZjB,IAAoB,IAAQX,EACvC,SAATD,GAAiB,CAAC,IAAD,EACb+C,EAAa,UAAGnB,EAAMoB,gBAAgB,gBAAzB,aAAG,EAAgC3C,SACtDgB,EAAIW,QAAQ3B,SAAS6B,EAAIb,EAAIW,QAAQ3B,SAAS6B,EAAIa,EAAcb,EAChEb,EAAIW,QAAQ3B,SAAS+B,EAAIf,EAAIW,QAAQ3B,SAAS+B,EAAIW,EAAcX,MAMpE,kCACE,uBACEa,MAAOrD,EACPM,SAAUY,EACVd,KAAMA,EACNK,SAAU,CAACJ,EAAU,EAAG,GACxBoB,IAAKA,EALP,UAOGyB,EACD,2DACEvC,OAAO,YACHW,GAFN,IAGEoB,UAAW,EACXC,UAAW,SAEP,IACR,cAAC,EAAD,eAAeK,Q,QC1BNM,MA1Bf,WACE,IAAM7B,EAAMC,mBAEN6B,EAActE,YAAW,CAC7BsC,IAAKiC,MASP,OANAzB,aAAS,YAAgB,IAAD,EAChB0B,EAAc,UADE,EAAZzB,MACmBoB,gBAAgB,iBAAzB,aAAG,EAAiC3C,SACxDgB,EAAIW,QAAQ3B,SAAS6B,EAAImB,EAAenB,EACxCb,EAAIW,QAAQ3B,SAAS+B,EAAIiB,EAAejB,KAIxC,uBACEf,IAAKA,EACLhB,SAAU,CAAC,EAAG,EAAG,GACjBL,KAAM,aACNE,SAAU,CAAWC,KAAKC,GAAK,GAAnB,MAAuB,EAAG,GAJxC,UAME,qCAAqBE,KAAM,CAAC,GAAI,EAAG,EAAG,MACtC,2DAAmBC,OAAO,YAAe4C,GAAzC,IAAsD3C,KAAMC,oBCOnD6C,UA5Bf,WACE,IAAMR,EAAiB,sCAAsBxC,KAAM,CAAC,EAAG,GAAI,MAI3D,OACE,kCACE,cAAC,EAAD,eAAgCqC,KAApBA,IAAU3C,MAEtB,cAAC,EAAD,aAEE8C,eAAgBA,GACZS,KAFCA,IAASvD,MAIfwD,IAAQrC,KAAI,SAACsC,GACZ,OACE,cAAC,EAAD,aAEEX,eAAgBA,GACZW,GAFCA,EAAOzD,SAMlB,cAAC,EAAD","file":"static/js/4.e0807b60.chunk.js","sourcesContent":["import { TextureLoader } from 'three';\nimport { useLoader } from '@react-three/fiber';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url); // @ts-expect-error new in r3f 7.0.5\n\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n","import { DoubleSide } from \"three\";\n\nfunction OrbitRing({ size, innerDiameter, facets, color, name, distance }) {\n  return (\n    <mesh\n      name={name}\n      rotation={[Math.PI / 2, 0, 0]}\n      position={[distance, 0, 0]}\n    >\n      <ringBufferGeometry args={[size, innerDiameter, facets]} />\n      <meshStandardMaterial attach=\"material\" side={DoubleSide} color={color} />\n    </mesh>\n  );\n}\n\nexport default OrbitRing;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\nimport * as THREE from \"three\";\nimport OrbitRing from \"./OrbitRing\";\nimport { earthData } from \"../utilities/planetData\";\n\nfunction Earth({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  distance,\n  axialTilt,\n  bumpMap,\n  specularMap,\n  earthCloud,\n}) {\n  const planetMaterial = useTexture({\n    map: texture,\n    bumpMap: bumpMap,\n    specularMap: specularMap,\n  });\n  const cloudMaterial = useTexture({\n    map: earthCloud,\n  });\n  const ref = useRef();\n  const activePlanetName = useStore(\n    (state) => state.activePlanet.activePlanetName\n  );\n  \n  useFrame(({ scene }) => {\n    const time = Date.now();\n    if (activePlanetName !== name) {\n      ref.current.rotation.y += rotationRate * 0.1; //scale by 1/10 ratation speed\n      ref.current.position.x =\n        Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distance;\n      ref.current.position.z =\n        Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distance;\n    }\n  });\n\n  return (\n    <group>\n      <mesh\n        rotation={axialTilt}\n        name={name}\n        position={[distance, 0, 0]}\n        ref={ref}\n      >\n        <sphereBufferGeometry args={[size, 48, 48]} />\n        <meshPhongMaterial\n          attach=\"material\"\n          {...planetMaterial}\n          shininess={0}\n          bumpScale={0.005}\n          specular={new THREE.Color(\"grey\")}\n        />\n        <mesh>\n          <sphereBufferGeometry args={[size + 0.005, 48, 48]} />\n          <meshPhongMaterial\n            {...cloudMaterial}\n            attach=\"material\"\n            transparent={true}\n          />\n        </mesh>\n      </mesh>\n      \n      <OrbitRing {...earthData.orbitData} />\n    </group>\n  );\n}\n\nexport default Earth;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\nimport OrbitRing from \"./OrbitRing\";\n\nfunction Planet({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  distance,\n  axialTilt,\n  orbitData,\n  planetGeometry,\n}) {\n  const planetMaterial = useTexture({ map: texture });\n  const ref = useRef();\n  const activePlanetName = useStore(\n    (state) => state.activePlanet.activePlanetName\n  );\n\n  useFrame(({ scene }) => {\n    const time = Date.now();\n    ref.current.rotation.y += rotationRate * 0.1; //scale by 1/10 ratation speed;\n\n    if (name !== activePlanetName) {\n      ref.current.position.x =\n        Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distance;\n      ref.current.position.z =\n        Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distance;\n      if (name === \"moon\") {\n        const earthPosition = scene.getObjectByName(\"earth\")?.position;\n        ref.current.position.x = ref.current.position.x + earthPosition.x;\n        ref.current.position.z = ref.current.position.z + earthPosition.z;\n      }\n    }\n  });\n\n  return (\n    <group>\n      <mesh\n        scale={size}\n        rotation={axialTilt}\n        name={name}\n        position={[distance, 0, 0]}\n        ref={ref}\n      >\n        {planetGeometry}\n        <meshPhongMaterial\n          attach=\"material\"\n          {...planetMaterial}\n          shininess={0}\n          bumpScale={0.3}\n        />\n      </mesh>{\" \"}\n      <OrbitRing {...orbitData} />\n    </group>\n  );\n}\n\nexport default Planet;\n","import { useRef } from \"react\";\nimport { useTexture } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { DoubleSide } from \"three\";\nimport ringtexture from \"../assets/textures/texture_jupiter.jpeg\";\nfunction SaturnRing() {\n  const ref = useRef();\n\n  const ringTexture = useTexture({\n    map: ringtexture,\n  });\n\n  useFrame(({ scene }) => {\n    const saturnPosition = scene.getObjectByName(\"saturn\")?.position;\n    ref.current.position.x = saturnPosition.x;\n    ref.current.position.z = saturnPosition.z;\n  });\n\n  return (\n    <mesh\n      ref={ref}\n      position={[0, 0, 0]}\n      name={\"saturnRing\"}\n      rotation={[-26.73 * (Math.PI / 2), 0, 0]}\n    >\n      <torusBufferGeometry args={[20, 4, 2, 50]} />\n      <meshBasicMaterial attach=\"material\" {...ringTexture} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default SaturnRing;\n","import { planets, earthData, moonData } from \"../utilities/planetData\";\nimport Earth from \"./Earth\";\nimport Planet from \"./Planet\";\nimport SaturnRing from \"./SaturnRing\";\n\nfunction SolarSystem() {\n  const planetGeometry = <sphereBufferGeometry args={[1, 40, 40]} />;\n  // const moon = (\n  //   <Planet key={moonData.name} planetGeometry={planetGeometry} {...moonData} />\n  // );\n  return (\n    <group>\n      <Earth key={earthData.name} {...earthData} />\n    \n      <Planet\n        key={moonData.name}\n        planetGeometry={planetGeometry}\n        {...moonData}\n      />\n      {planets.map((planet) => {\n        return (\n          <Planet\n            key={planet.name}\n            planetGeometry={planetGeometry}\n            {...planet}\n          />\n        );\n      })}\n      <SaturnRing />\n    </group>\n  );\n}\n\nexport default SolarSystem;\n"],"sourceRoot":""}