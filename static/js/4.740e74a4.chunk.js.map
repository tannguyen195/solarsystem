{"version":3,"sources":["../node_modules/@react-three/drei/core/useTexture.js","components/Planet.js","components/SolarSystem.js"],"names":["IsObject","url","Object","Array","isArray","useTexture","input","textures","useLoader","TextureLoader","values","keys","keyed","forEach","key","assign","indexOf","preload","clear","Planet","name","rotationRate","orbitRate","size","texture","distance","axialTilt","planetTexture","map","ref","useRef","activePlanet","useStore","state","useFrame","scene","time","Date","now","current","rotation","y","position","x","Math","sin","z","cos","earthPosition","getObjectByName","args","attach","SolarSystem","planets","planet"],"mappings":"wKAGMA,EAAW,SAAAC,GAAG,OAAIA,IAAQC,OAAOD,KAASE,MAAMC,QAAQH,IAAuB,oBAARA,GAC7E,SAASI,EAAWC,GAClB,IAAMC,EAAWC,YAAUC,gBAAeT,EAASM,GAASJ,OAAOQ,OAAOJ,GAASA,GAEnF,GAAIN,EAASM,GAAQ,CACnB,IAAMK,EAAOT,OAAOS,KAAKL,GACnBM,EAAQ,GAId,OAHAD,EAAKE,SAAQ,SAAAC,GAAG,OAAIZ,OAAOa,OAAOH,EAAdV,OAAA,IAAAA,CAAA,GACjBY,EAAMP,EAASI,EAAKK,QAAQF,SAExBF,EAEP,OAAOL,EAIXF,EAAWY,QAAU,SAAAhB,GAAG,OAAIO,IAAUS,QAAQR,gBAAeR,IAG7DI,EAAWa,MAAQ,SAAAZ,GAAK,OAAIE,IAAUU,MAAMT,gBAAeH,K,gGC2B5Ca,MA5Cf,YAQI,IAPFC,EAOC,EAPDA,KACAC,EAMC,EANDA,aACAC,EAKC,EALDA,UACAC,EAIC,EAJDA,KACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,SACAC,EACC,EADDA,UAEMC,EAAgBtB,YAAW,CAC/BuB,IAAKJ,IAEDK,EAAMC,mBACNC,EAAeC,aAAS,SAACC,GAAD,OAAWA,EAAMF,gBAkB/C,OAhBAG,aAAS,YAAgB,IAAbC,EAAY,EAAZA,MACJC,EAAOC,KAAKC,MAElB,GADAT,EAAIU,QAAQC,SAASC,GAAKpB,EACtBD,IAASW,IACXF,EAAIU,QAAQG,SAASC,EACnBC,KAAKC,IAAIT,GAAQ,GAAiB,IAAZd,IAAoB,IAAQG,EACpDI,EAAIU,QAAQG,SAASI,EACnBF,KAAKG,IAAIX,GAAQ,GAAiB,IAAZd,IAAoB,IAAQG,EACvC,SAATL,GAAiB,CAAC,IAAD,EACb4B,EAAa,UAAGb,EAAMc,gBAAgB,gBAAzB,aAAG,EAAgCP,SACtDb,EAAIU,QAAQG,SAASC,EAAId,EAAIU,QAAQG,SAASC,EAAIK,EAAcL,EAChEd,EAAIU,QAAQG,SAASI,EAAIjB,EAAIU,QAAQG,SAASI,EAAIE,EAAcF,MAMpE,uBACEN,SAAUd,EACVN,KAAMA,EACNsB,SAAU,CAACjB,EAAU,EAAG,GACxBI,IAAKA,EAJP,UAME,sCAAsBqB,KAAM,CAAC3B,EAAM,GAAI,MACvC,kDAAsB4B,OAAO,YAAexB,QCnCnCyB,UANf,WACE,OAAOC,IAAQzB,KAAI,SAAC0B,GAClB,OAAO,cAAC,EAAD,eAA8BA,GAAjBA,EAAOlC","file":"static/js/4.740e74a4.chunk.js","sourcesContent":["import { TextureLoader } from 'three';\nimport { useLoader } from '@react-three/fiber';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url); // @ts-expect-error new in r3f 7.0.5\n\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\n\nfunction Planet({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  distance,\n  axialTilt,\n}) {\n  const planetTexture = useTexture({\n    map: texture,\n  });\n  const ref = useRef();\n  const activePlanet = useStore((state) => state.activePlanet);\n\n  useFrame(({ scene }) => {\n    const time = Date.now();\n    ref.current.rotation.y += rotationRate;\n    if (name !== activePlanet) {\n      ref.current.position.x =\n        Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distance;\n      ref.current.position.z =\n        Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distance;\n      if (name === \"moon\") {\n        const earthPosition = scene.getObjectByName(\"earth\")?.position;\n        ref.current.position.x = ref.current.position.x + earthPosition.x;\n        ref.current.position.z = ref.current.position.z + earthPosition.z;\n      }\n    }\n  });\n\n  return (\n    <mesh\n      rotation={axialTilt}\n      name={name}\n      position={[distance, 0, 0]}\n      ref={ref}\n    >\n      <sphereBufferGeometry args={[size, 48, 48]} />\n      <meshStandardMaterial attach=\"material\" {...planetTexture} />\n    </mesh>\n  );\n}\n\nexport default Planet;\n","import { planets } from \"../utilities/planetData\";\nimport Planet from \"./Planet\";\n\nfunction SolarSystem() {\n  return planets.map((planet) => {\n    return <Planet key={planet.name} {...planet} />;\n  });\n}\n\nexport default SolarSystem;\n"],"sourceRoot":""}