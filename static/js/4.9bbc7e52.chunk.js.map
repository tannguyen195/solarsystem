{"version":3,"sources":["../node_modules/@react-three/drei/core/useTexture.js","components/OrbitRing.js","components/Earth.js","components/Planet.js","components/SaturnRing.js","components/Moon.js","components/Sun/SunMaterial.js","components/Sun/shaderSun/vertex.glsl.js","components/Sun/shaderSun/fragment.glsl.js","components/Sun/PerlinMaterial.js","components/Sun/shaderPerlin/vertex.glsl.js","components/Sun/shaderPerlin/fragment.glsl.js","components/Sun/AroundMaterial.js","components/Sun/shaderAround/vertex.glsl.js","components/Sun/shaderAround/fragment.glsl.js","components/Sun/Sun.js","components/SolarSystem.js"],"names":["IsObject","url","Object","Array","isArray","useTexture","input","textures","useLoader","TextureLoader","values","keys","keyed","forEach","key","assign","indexOf","preload","clear","OrbitRing","size","innerDiameter","facets","color","name","distance","rotation","Math","PI","position","args","attach","side","DoubleSide","Earth","rotationRate","orbitRate","texture","axialTilt","bumpMap","specularMap","earthCloud","distanceScale","planetGeometry","planetMaterial","map","cloudMaterial","ref","useRef","activePlanetName","useStore","state","activePlanet","useFrame","scene","time","Date","now","current","y","x","sin","z","cos","scale","shininess","bumpScale","specular","THREE","transparent","earthData","orbitData","Planet","earthPosition","getObjectByName","SaturnRing","ringTexture","ringtexture","saturnPosition","Moon","useThree","SunMaterial","extensions","derivatives","uniforms","value","resolution","vertexShader","fragmentShader","this","v","extend","PerlinMaterial","uPerlin","AroundMaterial","blending","Sun","shaderPerlin","shaderSun","cubeCamera","useMemo","format","generateMipmaps","minFilter","encoding","target","delta","update","gl","SolarSystem","moonData","planets","planet"],"mappings":"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","file":"static/js/4.9bbc7e52.chunk.js","sourcesContent":["import { TextureLoader } from 'three';\nimport { useLoader } from '@react-three/fiber';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url); // @ts-expect-error new in r3f 7.0.5\n\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n","import { DoubleSide } from \"three\";\n\nfunction OrbitRing({ size, innerDiameter, facets, color, name, distance }) {\n  return (\n    <mesh\n      name={name}\n      rotation={[Math.PI / 2, 0, 0]}\n      position={[distance, 0, 0]}\n    >\n      <ringBufferGeometry args={[size, innerDiameter, facets]} />\n      <meshStandardMaterial attach=\"material\" side={DoubleSide} color={color} />\n    </mesh>\n  );\n}\n\nexport default OrbitRing;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\nimport * as THREE from \"three\";\nimport OrbitRing from \"./OrbitRing\";\nimport { earthData } from \"../utilities/planetData\";\n\nfunction Earth({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  axialTilt,\n  bumpMap,\n  specularMap,\n  earthCloud,\n  distanceScale,\n  planetGeometry,\n}) {\n  const planetMaterial = useTexture({\n    map: texture,\n    bumpMap: bumpMap,\n    specularMap: specularMap,\n  });\n  const cloudMaterial = useTexture({\n    map: earthCloud,\n  });\n  const ref = useRef();\n  const activePlanetName = useStore((state) => state.activePlanet?.name);\n\n  useFrame(({ scene }) => {\n    const time = Date.now();\n    if (activePlanetName !== name) {\n      if (activePlanetName !== \"moon\") {\n        ref.current.rotation.y += rotationRate * 0.1; //scale by 1/10 ratation speed\n        ref.current.position.x =\n          Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n        ref.current.position.z =\n          Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n      }\n    }\n  });\n\n  return (\n    <group>\n      <mesh\n        scale={size}\n        rotation={axialTilt}\n        name={name}\n        position={[distanceScale, 0, 0]}\n        ref={ref}\n      >\n        {planetGeometry}\n        <meshPhongMaterial\n          attach=\"material\"\n          {...planetMaterial}\n          shininess={0}\n          bumpScale={0.005}\n          specular={new THREE.Color(\"grey\")}\n        />\n        <mesh>\n          <sphereBufferGeometry args={[size + 0.005, 48, 48]} />\n          <meshPhongMaterial\n            {...cloudMaterial}\n            attach=\"material\"\n            transparent={true}\n          />\n        </mesh>\n      </mesh>\n\n      <OrbitRing {...earthData.orbitData} />\n    </group>\n  );\n}\n\nexport default Earth;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\nimport OrbitRing from \"./OrbitRing\";\n\nfunction Planet({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  distanceScale,\n  axialTilt,\n  orbitData,\n  planetGeometry,\n}) {\n  const planetMaterial = useTexture({ map: texture });\n  const ref = useRef();\n  const activePlanetName = useStore((state) => state.activePlanet?.name);\n\n  useFrame(({ scene }) => {\n    const time = Date.now();\n    ref.current.rotation.y += rotationRate * 0.1; //scale by 1/10 ratation speed;\n\n    if (name !== activePlanetName) {\n      ref.current.position.x =\n        Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n      ref.current.position.z =\n        Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n      if (name === \"moon\") {\n        const earthPosition = scene.getObjectByName(\"earth\")?.position;\n        ref.current.position.x = ref.current.position.x + earthPosition.x;\n        ref.current.position.z = ref.current.position.z + earthPosition.z;\n      }\n    }\n  });\n\n  return (\n    <group>\n      <mesh\n        scale={size}\n        rotation={axialTilt}\n        name={name}\n        position={[distanceScale, 0, 0]}\n        ref={ref}\n      >\n        {planetGeometry}\n        <meshPhongMaterial\n          attach=\"material\"\n          {...planetMaterial}\n          shininess={0}\n          bumpScale={0.3}\n        />\n      </mesh>{\" \"}\n      <OrbitRing {...orbitData} />\n    </group>\n  );\n}\n\nexport default Planet;\n","import { useRef } from \"react\";\nimport { useTexture } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { DoubleSide } from \"three\";\nimport ringtexture from \"../assets/textures/texture_jupiter.jpeg\";\nfunction SaturnRing() {\n  const ref = useRef();\n\n  const ringTexture = useTexture({\n    map: ringtexture,\n  });\n\n  useFrame(({ scene }) => {\n    const saturnPosition = scene.getObjectByName(\"saturn\")?.position;\n    ref.current.position.x = saturnPosition.x;\n    ref.current.position.z = saturnPosition.z;\n  });\n\n  return (\n    <mesh\n      ref={ref}\n      position={[0, 0, 0]}\n      name={\"saturnRing\"}\n      rotation={[-26.73 * (Math.PI / 2), 0, 0]}\n    >\n      <torusBufferGeometry args={[20, 4, 2, 50]} />\n      <meshBasicMaterial attach=\"material\" {...ringTexture} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default SaturnRing;\n","import React, { useRef } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport useStore from \"../store/useStore\";\n\nfunction Moon({\n  name,\n  rotationRate,\n  orbitRate,\n  size,\n  texture,\n  distanceScale,\n  axialTilt,\n  planetGeometry,\n  orbitData,\n}) {\n  const planetMaterial = useTexture({ map: texture });\n  const ref = useRef();\n\n  const activePlanetName = useStore((state) => state.activePlanet?.name);\n\n  const { scene } = useThree();\n\n  useFrame(() => {\n    const time = Date.now();\n    ref.current.rotation.y += rotationRate * 0.1; //scale by 1/10 ratation speed;\n\n    if (name !== activePlanetName) {\n      ref.current.position.x =\n        Math.sin(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n      ref.current.position.z =\n        Math.cos(time * (1 / (orbitRate * 200)) + 10.0) * distanceScale;\n\n      const earthPosition = scene.getObjectByName(\"earth\")?.position;\n      ref.current.position.x = earthPosition.x + ref.current.position.x/10;\n      ref.current.position.z = earthPosition.z + ref.current.position.z/10;\n    }\n  });\n\n  return (\n    <mesh\n      scale={size}\n      rotation={axialTilt}\n      name={name}\n      position={[0, 0, 0]}\n      ref={ref}\n    >\n      {planetGeometry}\n      <meshPhongMaterial\n        attach=\"material\"\n        {...planetMaterial}\n        shininess={0}\n        bumpScale={0.3}\n      />\n    </mesh>\n  );\n}\n\nexport default Moon;\n","import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\nimport vertex from \"./shaderSun/vertex.glsl.js\";\nimport fragment from \"./shaderSun/fragment.glsl.js\";\n\nexport default class SunMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives: enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { value: 0 },\n        resolution: {\n          value: new THREE.Vector4(),\n        },\n        \n      },\n      vertexShader: vertex(),\n      fragmentShader: fragment(),\n    });\n  }\n\n\n  get time() {\n    return this.uniforms.time.value\n  }\n\n  set time(v) {\n    this.uniforms.time.value = v\n  }\n\n}\n\nextend({ SunMaterial });\n","export default function vertex() {\n  return `\n    uniform float time;\n    varying vec3 vPosition;\n \n    uniform vec2 pixels;\n    float PI = 3.14159265359;\n    void main() {\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); \n    }\n`;\n}\n","export default function fragment() {\n  return `\n  uniform float time; \n  uniform float progress; \n  uniform sampler2D texture1;\n  uniform vec4 resolution;\n  varying vec3 vPosition;\n\n  float PI = 3.14159265359;\n    \n  // Description : Array and textureless GLSL 2D/3D/4D simplex \n  //               noise functions.\n  //      Author : Ian McEwan, Ashima Arts.\n  //  Maintainer : stegu\n  //     Lastmod : 20110822 (ijm)\n  //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n  //               Distributed under the MIT License. See LICENSE file.\n  //               https://github.com/ashima/webgl-noise\n  //               https://github.com/stegu/webgl-noise\n  // \n\n  vec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\n  float mod289(float x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\n  vec4 permute(vec4 x) {\n      return mod289(((x*34.0)+10.0)*x);\n  }\n\n  float permute(float x) {\n      return mod289(((x*34.0)+10.0)*x);\n  }\n\n  vec4 taylorInvSqrt(vec4 r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  float taylorInvSqrt(float r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  vec4 grad4(float j, vec4 ip)\n    {\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n    vec4 p,s;\n\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n    s = vec4(lessThan(p, vec4(0.0)));\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n    return p;\n    }\n              \n  // (sqrt(5) - 1)/4 = F4, used once below\n  #define F4 0.309016994374947451\n\n  float snoise(vec4 v)\n    {\n    const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                          0.276393202250021,  // 2 * G4\n                          0.414589803375032,  // 3 * G4\n                        -0.447213595499958); // -1 + 4 * G4\n\n  // First corner\n    vec4 i  = floor(v + dot(v, vec4(F4)) );\n    vec4 x0 = v -   i + dot(i, C.xxxx);\n\n  // Other corners\n\n  // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n    vec4 i0;\n    vec3 isX = step( x0.yzw, x0.xxx );\n    vec3 isYZ = step( x0.zww, x0.yyz );\n  //  i0.x = dot( isX, vec3( 1.0 ) );\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n  //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    // i0 now contains the unique values 0,1,2,3 in each channel\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n    //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n    //  x1 = x0 - i1  + 1.0 * C.xxxx\n    //  x2 = x0 - i2  + 2.0 * C.xxxx\n    //  x3 = x0 - i3  + 3.0 * C.xxxx\n    //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n    vec4 x1 = x0 - i1 + C.xxxx;\n    vec4 x2 = x0 - i2 + C.yyyy;\n    vec4 x3 = x0 - i3 + C.zzzz;\n    vec4 x4 = x0 + C.wwww;\n\n  // Permutations\n    i = mod289(i); \n    float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n    vec4 j1 = permute( permute( permute( permute (\n              i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n            + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n            + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n            + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n  // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n  // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n    vec4 p0 = grad4(j0,   ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n  // Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt(dot(p4,p4));\n\n  // Mix contributions from the five corners\n    vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n    vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n    m0 = m0 * m0;\n    m1 = m1 * m1;\n    return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n    }\n\n    float fbm(vec4 p) {\n      float sum = 0.;\n      float amp = 1.;\n      float scale = 1.;\n      for(int i = 0;i < 8;i++) {\n        sum += snoise(p*scale)*amp;\n        p.w += 100.;\n        amp *= .9;\n        scale += 2.;\n      }\n      return sum;\n    }\n  void main() {\n    vec4 p = vec4(vPosition*.4,time*0.005);\n    float noisy = fbm(p);\n\n    vec4 p1 = vec4(vPosition*.2,time*.005);\n    float spots = max(snoise(p1), 0.);\n\n    gl_FragColor = vec4(noisy);\n    gl_FragColor *= mix(1., spots, 0.5);\n  }\n  `\n}\n","import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\nimport vertex from \"./shaderPerlin/vertex.glsl.js\";\nimport fragment from \"./shaderPerlin/fragment.glsl.js\";\n\nexport default class PerlinMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives: enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { value: 0 },\n        uPerlin: { value: null },\n        resolution: {\n          value: new THREE.Vector4(),\n        },\n      },\n      vertexShader: vertex(),\n      fragmentShader: fragment(),\n    });\n  }\n\n  get time() {\n    return this.uniforms.time.value;\n  }\n\n  set time(v) {\n    this.uniforms.time.value = v;\n  }\n\n  get uPerlin() {\n    return this.uniforms.uPerlin.value;\n  }\n\n  set uPerlin(v) {\n    this.uniforms.uPerlin.value = v;\n  }\n\n}\n\nextend({ PerlinMaterial });\n","export default function vertex() {\n  return `\n    uniform float time;\n    uniform vec2 pixels;\n    float PI = 3.14159265359;\n    \n    varying vec3 vLayer0;\n    varying vec3 vLayer1;\n    varying vec3 vLayer2;\n  \n    varying vec3 eyeVector;\n    varying vec3 vNormal;\n\n    mat2 rotate(float a) {\n      float s = sin(a);\n      float c = cos(a);\n      return mat2(c, -s, s, c);\n    }\n    \n    void main() {\n      vNormal = normal;\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      eyeVector = normalize(worldPosition.xyz - cameraPosition);\n\n      float t = time*.005;\n\n      mat2 rot = rotate(t);\n      vec3 p0 = position;      \n      p0.yz = rot*p0.yz;\n      vLayer0 = p0;\n\n      mat2 rot1 = rotate(t*1.5 + 10.);\n      vec3 p1 = position;      \n      p1.xz = rot1*p1.xz;\n      vLayer1 = p1;\n\n      mat2 rot2 = rotate(t*2.0 + 30.);\n      vec3 p2 = position;      \n      p2.xy = rot2*p2.xy;\n      vLayer2 = p2;\n\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); \n    }\n`;\n}\n","export default function fragment() {\n  return `\n  uniform float time; \n  uniform float progress; \n  uniform sampler2D texture1;\n  uniform vec4 resolution;\n  uniform samplerCube uPerlin;\n\n  varying vec3 eyeVector;\n  varying vec3 vNormal;\n\n  float PI = 3.14159265359;\n  \n  varying vec3 vLayer0;\n  varying vec3 vLayer1;\n  varying vec3 vLayer2;\n\n  float Fresnel(vec3 eyeVector, vec3 worldNormal) {\n    return pow(1.0 + dot(eyeVector, worldNormal),3.0);\n  }\n\n  vec3 brightnessToColor(float b) {\n    b *= 0.25;\n    return (vec3(b, b*b, b*b*b*b)/0.25)*0.6;\n  }\n  \n  float supersun() {\n    float sum = 0.;\n    sum += textureCube(uPerlin, vLayer0).r;\n    sum += textureCube(uPerlin, vLayer1).r;\n    sum += textureCube(uPerlin, vLayer2).r;\n    sum += 0.33;\n    return sum;\n  }\n\n  void main() {\n   float brightness = supersun();\n   brightness = brightness*.9 + 1.;\n\n   float fres = Fresnel(eyeVector, vNormal);\n\n   brightness += pow(fres,0.8);\n\n   vec3 col = brightnessToColor(brightness);\n\n   gl_FragColor = vec4(col,1.0);\n\n  }\n  `;\n}\n","import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\nimport vertex from \"./shaderAround/vertex.glsl.js\";\nimport fragment from \"./shaderAround/fragment.glsl.js\";\n\nexport default class AroundMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      side: THREE.BackSide,\n      uniforms: {\n        time: { value: 0 },\n        resolution: {\n          value: new THREE.Vector4(),\n        },\n      },\n      vertexShader: vertex(),\n      fragmentShader: fragment(),\n      blending: THREE.AdditiveBlending,\n    });\n  }\n\n  get time() {\n    return this.uniforms.time.value;\n  }\n\n  set time(v) {\n    this.uniforms.time.value = v;\n  }\n\n  get uPerlin() {\n    return this.uniforms.uPerlin.value;\n  }\n\n  set uPerlin(v) {\n    this.uniforms.uPerlin.value = v;\n  }\n}\n\nextend({ AroundMaterial });\n","export default function vertex() {\n  return `\n    uniform float time;\n    varying vec2 vUv;\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    uniform vec2 pixels;\n    float PI = 3.14159265359;\n    \n    void main() {\n      vPosition = position;\n      vNormal = normal;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.); \n    }\n`;\n}\n","export default function fragment() {\n  return `\n  uniform float time; \n  uniform float progress; \n  uniform sampler2D texture1;\n  uniform vec4 resolution;\n\n  varying vec2 vUv;\n  varying vec3 vNormal;\n  varying vec3 vPosition;\n\n  float PI = 3.14159265359;\n\n  vec3 brightnessToColor(float b) {\n    b *= 0.25;\n    return (vec3(b, b*b, b*b*b*b)/0.25)*0.6;\n  }\n  \n  void main() {\n    float radial = 1. - vNormal.z;\n    radial *= radial* radial;\n\n    float brightness = 1. + radial*0.83;\n\n    gl_FragColor.rgb = brightnessToColor(brightness)*radial;\n    gl_FragColor.a = radial;\n    // float intensity = pow(.5 - dot(vNormal, vec3(0.5,0,0.)), 2.);\n    // gl_FragColor = vec4(1., .6, .4, 1.) * intensity;\n  }\n  `;\n}\n","import { useRef, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\n\nimport \"./SunMaterial\";\nimport \"./PerlinMaterial\";\nimport \"./AroundMaterial\";\n\nfunction Sun() {\n  const shaderPerlin = useRef();\n  const shaderSun = useRef();\n\n  const cubeCamera = useRef();\n\n  const [target] = useMemo(() => {\n    const target = new THREE.WebGLCubeRenderTarget(256, {\n      format: THREE.RGBFormat,\n      generateMipmaps: true,\n      minFilter: THREE.LinearMipMapLinearFilter,\n      encoding: THREE.sRGBEncoding,\n    });\n    return [target];\n  }, []);\n\n  useFrame((state, delta) => {\n    shaderSun.current.time += delta;\n\n    shaderPerlin.current.time += delta;\n\n    shaderPerlin.current.uPerlin = target.texture;\n    cubeCamera.current.update(state.gl, state.scene);\n  });\n\n  return (\n    <group>\n      <mesh name=\"sun\" position={[0, 0, 0]}>\n        <sphereBufferGeometry args={[25, 40, 40]} />\n        <sunMaterial ref={shaderSun} />\n      </mesh>\n\n      {/* <mesh position={[0, 0, 0]}>\n        <sphereBufferGeometry args={[17, 48, 48]} />\n        <aroundMaterial ref={shaderAround} />\n      </mesh> */}\n\n      <mesh>\n        <cubeCamera\n          name=\"cubeCamera\"\n          ref={cubeCamera}\n          position={[0, 0, 0]}\n          args={[0.1, 26, target]}\n        ></cubeCamera>\n        <sphereBufferGeometry args={[25, 40, 40]} />\n        <perlinMaterial ref={shaderPerlin} />\n      </mesh>\n    </group>\n  );\n}\n\nexport default Sun;\n","import { planets, earthData, moonData } from \"../utilities/planetData\";\nimport Earth from \"./Earth\";\nimport Planet from \"./Planet\";\nimport SaturnRing from \"./SaturnRing\";\nimport Moon from \"./Moon\";\nimport Sun from \"./Sun/Sun\";\n\nfunction SolarSystem() {\n  const planetGeometry = <sphereBufferGeometry args={[1, 40, 40]} />;\n\n  return (\n    <group>\n      <Sun />\n\n      <Earth\n        key={earthData.name}\n        {...earthData}\n        planetGeometry={planetGeometry}\n      />\n      <Moon key={moonData.name} planetGeometry={planetGeometry} {...moonData} />\n      {planets.map((planet) => {\n        return (\n          <Planet\n            key={planet.name}\n            planetGeometry={planetGeometry}\n            {...planet}\n          />\n        );\n      })}\n      <SaturnRing />\n    </group>\n  );\n}\n\nexport default SolarSystem;\n"],"sourceRoot":""}